package com.nms.unitTesting

import org.scalatest.Spec
import org.scalatest.prop.Checkers
import com.nms.compAndInherit.Element.elem


/**
 * User: nsullins
 * Date: 1/15/11
 * Time: 3:46 PM
 */


//This class refers to testing style of behavior-driven development. The emphasis is on wirting human-readable specifications of the expected behavior
//of the code and accompanying tests that verify the code has the specified behavior


class SpecAndChecks extends Checkers with Spec{


	//A spec contains "describers" and "specifiers". Describers describe the subject and specifiers specify the behavior

	describe("A UniformElement"){

		it("should have a width equal  to the passed value"){
			val ele= elem('x', 2, 3)
			assert(ele.width === 3)
		}

		it("should have height equal to the passed value"){
			val ele = elem('x', 2, 3)
			assert(ele.height  === 2)
		}

		it("should throw an AssertionError if height is <= 0"){
			intercept[AssertionError]{
			val ele = elem('x', -3, 3)
			}
		}
	}


	//output below. notice that the first two tests failed and noted in output but the last passed because an error was thrown
	/*
	 *
	 * A UniformElement
		asserting height is greater than zero
		- should have a width equla to the passed value *** FAILED *** (SpecAndChecks.scala:19)
		  org.scalatest.TestFailedException: 3 did not equal 2
		  ...
		  at com.nms.unitTesting.SpecAndChecks$$anonfun$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(SpecAndChecks.scala:19)
		  at com.nms.unitTesting.SpecAndChecks$$anonfun$1$$anonfun$apply$mcV$sp$1.apply(SpecAndChecks.scala:17)
		  at com.nms.unitTesting.SpecAndChecks$$anonfun$1$$anonfun$apply$mcV$sp$1.apply(SpecAndChecks.scala:17)
		  at org.scalatest.Spec$$anon$2.apply(Spec.scala:1388)
		  at org.scalatest.Suite$class.withFixture(Suite.scala:1509)
		  at com.nms.unitTesting.SpecAndChecks.withFixture(SpecAndChecks.scala:10)
		  at org.scalatest.Spec$class.runTest(Spec.scala:1385)
		  ...
		asserting height is greater than zero
		- should have height equal to the passed value *** FAILED *** (SpecAndChecks.scala:24)
		  org.scalatest.TestFailedException: 2 did not equal 3
		  ...
		  at com.nms.unitTesting.SpecAndChecks$$anonfun$1$$anonfun$apply$mcV$sp$2.apply$mcV$sp(SpecAndChecks.scala:24)
		  at com.nms.unitTesting.SpecAndChecks$$anonfun$1$$anonfun$apply$mcV$sp$2.apply(SpecAndChecks.scala:22)
		  at com.nms.unitTesting.SpecAndChecks$$anonfun$1$$anonfun$apply$mcV$sp$2.apply(SpecAndChecks.scala:22)
		  at org.scalatest.Spec$$anon$2.apply(Spec.scala:1388)
		  at org.scalatest.Suite$class.withFixture(Suite.scala:1509)
		  at com.nms.unitTesting.SpecAndChecks.withFixture(SpecAndChecks.scala:10)
		  at org.scalatest.Spec$class.runTest(Spec.scala:1385)
		  ...
		asserting height is greater than zero
		- should throw an AssertionError if height is <= 0

	 */



	//now test with ScalaCheck
	//ScalaCheck is an open source framework that enableds you to specify properties that the code under test must obey. For each property
	//ScalaCheck will generate test data and run tests that check that the property holds.

	//In the following example we check two properties that the the UniformElement class should obey. ScalaCheck properties are expressed as function
	//values that take as params the required test data, which will be generated by ScalaCheck. In the first property the test data is integer named 'w'

	//This example pass properties to a "check" method
//	check((w: Int) => w > 0 ==> (elem('x', 2, w).width == w))
	//check((h: Int) => h > 0 ==> (elem('x', h, 2).height == h))

}